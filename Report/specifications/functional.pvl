class Ref {

	////////// KERNEL
	invariant N==16 && H==6;
	invariant \matrix(tree,H,N*2);
	invariant \array(input,N*2);
	invariant \array(output,N*2);
	context (\forall* int i; 0<=i && i<N*2; Perm(input[i], read));
	context (\forall* int i; 0<=i && i<N*2; Perm(output[i], write));
	context (\forall* int i; 0<=i && i<N*2;
		(\forall* int j; 0<=j && j<H; Perm(tree[j][i], write))
	);
	void runKernel(int N, int H, int[N*2] input, int[N*2] output, int[H][N*2] tree) {

		////////// THREADS
		par runThreads (int t=0..N)
			context Perm(input[t], read);
			context Perm(input[t+N], read);

			context Perm(output[t], write);
			context Perm(output[t+N], write);

			context (\forall* int k; 0<=k && k<2;
				(\forall* int i; 0<=i && i<H; Perm(tree[i][k*N+t], write))
			);

			ensures output[t] == \sum([0 ..t), input);
			ensures output[t+N] == \sum([0 ..t+N), input);
		{
			////////// INPUT COPY
			tree[0][t] = input[t];
			tree[0][t+N] = input[t+N];

			////////// UPSWEEP
			int level=0;
			loop_invariant level>=0 && level<H;
			loop_invariant t>=0 && t<N;
			// Permissions
			loop_invariant (\forall* int k; 0<=k && k<2;
				(\forall* int i; level<=i && i<H; Perm(tree[i][k*N+t], write))
			);
			loop_invariant (\forall* int k; 0<=k && k<2;
				(\forall* int i; 0<=i && i<level; Perm(tree[i][t*2+k], 1/2))
			);
			loop_invariant (\forall* int k; 0<=k && k<4;
				(\forall* int i; 0<=i && i<level; t<N/4 ==> Perm(tree[i][t*4+k], 1/2))
			);
			// Functional
			loop_invariant (\forall* int i; 0<=i && i<N*2; tree[0][i] == input[i]);
			loop_invariant ((t+1)*2^level < N*2) => tree[level][t] == \sum([t*2^level ..(t+1)*2^level), input);
			while((level+1)<H) {
				level = level+1;
				barrier(runThreads) {
					context t>=0 && t<N;
					context level>=1 && level<H;
					// Permissions
					requires Perm(tree[level-1][t], write);
					requires Perm(tree[level-1][t+N], write);
					ensures (\forall* int k; 0<=k && k<2; Perm(tree[level-1][t*2+k], write));
					// Functional
					ensures ((t+1)*2^level < N*2) => tree[level][t] == \sum([t*2^level ..(t+1)*2^level), input);
				}
				tree[level][t] = tree[level-1][t*2] + tree[level-1][t*2+1];
			}

			////////// DOWNSWEEP
			tree[H-1][t] = 0; // Set the root of the tree to zero

			loop_invariant level>=0 && level<H;
			loop_invariant t>=0 && t<N;
			// Permissions
			loop_invariant (\forall* int k; 0<=k && k<2;
				(\forall* int i; level<=i && i<H; Perm(tree[i][k*N+t], write))
			);
			loop_invariant (\forall* int k; 0<=k && k<2;
				(\forall* int i; 0<=i && i<level; Perm(tree[i][t*2+k], write))
			);
			// Results
			loop_invariant tree[H-1][t] == 0;
			loop_invariant (t*2^(level-1) < N*2) => tree[level-1][t*2] == \sum([0 ..t*2^(level-1)], input);
			loop_invariant (t*2^(level-1) < N*2) => tree[level-1][t*2+1] == \sum([0 ..t*2^(level-1)+1], input);
			while(level>0) {
				// Do next down-sweep step
				tree[level-1][t*2+1] = tree[level-1][t*2] + tree[level][t];     // Right child
				tree[level-1][t*2] = tree[level][t];                            // Left child

				level = level-1;

				barrier(runThreads) {
					context t>=0 && t<N;
					context level>=0 && level<H;
					// Permissions
					requires Perm(tree[level][t*2], write);
					requires Perm(tree[level][t*2+1], write);
					ensures Perm(tree[level][t], write);
					ensures Perm(tree[level][t+N], write);
					// Functional
					ensures (t*2^(level-1) < N*2) => tree[level-1][t*2] == \sum([0 ..t*2^(level-1)], input);
					ensures (t*2^(level-1) < N*2) => tree[level-1][t*2+1] == \sum([0 ..t*2^(level-1)+1], input);
				}
			}

			////////// OUTPUT COPY
			output[t] = tree[0][t];
			output[t+N] = tree[0][t+N];
		}
	}
}














































