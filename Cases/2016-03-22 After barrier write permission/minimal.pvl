// -*- tab-width:4 ; indent-tabs-mode:nil -*-
// running with: vercors/unix/bin/vct SPEC/cSpecLatest.pvl --silver=silicon --single-group --progress --detail

class Ref {
    // Requires/Ensures for complete kernel
    requires N==32 && H==6;
    requires temp != null;
    requires (\forall* int i; 0<=i && i<N;
                (\forall* int j; 0<=j && j<H; Perm(temp[j][i], write))
             );

    // Kernel method
    void test(int N, int H, int[H][N] temp) {

        // Define threads
        par tst (int t=0..N;;true)
            requires N==32 && H==6;
            requires temp != null;
            requires t<(N/2) ==> Perm(temp[0][t*2], write);
            requires t<(N/2) ==> Perm(temp[0][t*2+1], write);
            requires (\forall* int i; 1<=i && i<H; Perm(temp[i][t], write));

        // Thread code
        {
            // Remaining steps of the upsweep phase
            int level=1;
            loop_invariant N==32 && H==6;
            loop_invariant temp != null;
            loop_invariant level>=1 && level<H;
            loop_invariant t>=0 && t<N;
            loop_invariant (\forall* int i; level<=i && i<H; Perm(temp[i][t], write));
            loop_invariant t<(N/2) ==> (\forall* int i; 0<=i && i<level; Perm(temp[i][t*2], write));
            loop_invariant t<(N/2) ==> (\forall* int i; 0<=i && i<level; Perm(temp[i][t*2+1], write));
            while((level+1)<H) {
                level = level+1;
                barrier(local) {
                    // This barrier changes permissions from this situation:
                    // t1 | t2 | t3 | t4 | t5 | t6 | t7 | t8 ...
                    // to the following situation:
                    // t1 | t1 | t2 | t2 | t3 | t3 | t4 | t4 ...
                    // for levels 0 to (H-2), top row keeps the old layout
                    // (t1 means thread 1 has permission for that slot)

                    requires temp != null;
                    requires N==32 && H==6;
                    requires level>=1 && level<H;
                    requires t>=0 && t<N;
                    requires Perm(temp[level-1][t], write);

                    ensures temp != null;
                    ensures N==32 && H==6;
                    ensures level>=1 && level<H;
                    ensures t>=0 && t<N;
                    ensures t<(N/2) ==> (\forall* int k; 0<=k && k<2; Perm(temp[level-1][t*2+k], write));
                }
                assert(t<(N/2) ==> Perm(temp[level-1][t*2], write));   // Fails
                assert(t<(N/2) ==> Perm(temp[level-1][t*2+1], write)); // Fails
                // Do next up-sweep step
                /*
                if(t < (N/2)) {
                    temp[level][t] = temp[level-1][t*2] + temp[level-1][t*2+1];
                }
                */
            }
        }
    }
}














































